/*
 * GlobalMilesAirlineAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using GlobalMilesAirlineAPI.Standard;
using GlobalMilesAirlineAPI.Standard.Utilities;

namespace GlobalMilesAirlineAPI.Standard.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum CabinTypeEnum
    {
        A, //First Class Discounted
        B, //Economy/Coach
        C, //Business Class
        D, //Business Class Discounted
        E, //Shuttle Service (no reservation allowed) or Economy/Coach Discounted
        F, //First Class
        G, //Conditional Reservation
        H, //Economy/Coach Discounted
        J, //Business Class Premium
        K, //Economy/Coach Discounted
        L, //Economy/Coach Discounted
        M, //Economy/Coach Discounted
        N, //Economy/Coach Discounted
        P, //First Class Premium
        Q, //Economy/Coach Discounted
        R, //First Class Suite or Supersonic (discontinued)
        S, //Economy/Coach
        T, //Economy/Coach Discounted
        U, //Shuttle Service
        V, //Economy/Coach Discounted
        W, //Economy/Coach Premium
        X, //Economy/Coach Discounted
        Y, //Economy/Coach
        Z, //Business Class Discounted
    }

    /// <summary>
    /// Helper for the enum type CabinTypeEnum
    /// </summary>
    public static class CabinTypeEnumHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };

        /// <summary>
        /// Converts a CabinTypeEnum value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The CabinTypeEnum value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(CabinTypeEnum enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case CabinTypeEnum.A:
                case CabinTypeEnum.B:
                case CabinTypeEnum.C:
                case CabinTypeEnum.D:
                case CabinTypeEnum.E:
                case CabinTypeEnum.F:
                case CabinTypeEnum.G:
                case CabinTypeEnum.H:
                case CabinTypeEnum.J:
                case CabinTypeEnum.K:
                case CabinTypeEnum.L:
                case CabinTypeEnum.M:
                case CabinTypeEnum.N:
                case CabinTypeEnum.P:
                case CabinTypeEnum.Q:
                case CabinTypeEnum.R:
                case CabinTypeEnum.S:
                case CabinTypeEnum.T:
                case CabinTypeEnum.U:
                case CabinTypeEnum.V:
                case CabinTypeEnum.W:
                case CabinTypeEnum.X:
                case CabinTypeEnum.Y:
                case CabinTypeEnum.Z:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of CabinTypeEnum values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of CabinTypeEnum values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<CabinTypeEnum> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into CabinTypeEnum value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed CabinTypeEnum value</returns>
        public static CabinTypeEnum ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type CabinTypeEnum", value));

            return (CabinTypeEnum) index;
        }
    }
} 